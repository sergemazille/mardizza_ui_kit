{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/script/Form.js","src/script/Styleguide.js","src/script/main.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;ICAa,I,WAAA,I;;;;;;;;;AAET;+BACc;AACV,iBAAK,QAAL;AACH;;;mCAEiB,CAEjB;;;;;;;;;;;;;;;;;ICTQ,U,WAAA,U;;;;;;;+BACK;AACV,gBAAI,cAAc,SAAS,gBAAT,CAA0B,8BAA1B,CAAlB;AACA,wBAAY,OAAZ,CAAoB,UAAS,MAAT,EAAiB;;AAEjC,uBAAO,gBAAP,CAAwB,OAAxB,EAAiC,UAAS,CAAT,EAAY;AACzC,sBAAE,cAAF;;AAEA,wBAAI,eAAe,KAAK,OAAL,CAAa,IAAhC;AACA,wBAAI,SAAS,KAAK,OAAL,CAAa,MAA1B;AACA,wBAAI,aAAa,KAAK,aAAL,CAAmB,aAApC;;AAEA,4BAAO,MAAP;AACI,6BAAK,UAAL;AACI,oCAAQ,IAAR;AACA;AACJ,6BAAK,OAAL;AACI;AACA;AACJ;AACI;AACA;AATR;;AAYA;AACA,6BAAS,OAAT,CAAiB,MAAjB,EAAyB;AACrB,4BAAI,QAAQ,WAAW,aAAX,CAAyB,OAAzB,CAAZ;;AAEA,8BAAM,QAAN,GAAiB,CAAC,MAAM,QAAxB;AACA,4BAAG,MAAM,QAAT,EAAmB;AACf,mCAAO,SAAP,GAAmB,WAAnB;AACH,yBAFD,MAEO;AACH,mCAAO,SAAP,GAAmB,YAAnB;AACH;AACJ;;AAED;AACA,6BAAS,KAAT,GAAiB;AACb,4BAAI,gBAAgB,WAAW,aAAX,CAAyB,WAAzB,CAApB;;AAEA;AACA,mCAAW,aAAX,CAAyB,OAAzB,EAAkC,QAAlC,GAA6C,KAA7C;AACA,sCAAc,SAAd,GAA0B,YAA1B;;AAEA;AACA,mCAAW,SAAX,GAAuB,aAAvB;;AAEA;AACA,mCAAW,aAAX,CAAyB,WAAzB,IAAwC,WAAW,aAAX,CAAyB,WAAzB,EAAsC,MAAtC,EAAxC,GAAyF,IAAzF;AACH;;AAED;AACA,6BAAS,KAAT,GAAiB;AACb;AACA,mCAAW,aAAX,CAAyB,OAAzB,EAAkC,QAAlC,GAA6C,KAA7C;;AAEA;AACA,mCAAW,SAAX,GAAuB,iBAAiB,MAAxC;;AAEA;AACA,4BAAI,eAAe,WAAW,aAAX,CAAyB,WAAzB,CAAnB;AACA,4BAAG,CAAE,YAAL,EAAmB;AACf,2CAAe,SAAS,aAAT,CAAuB,MAAvB,CAAf;AACA,yCAAa,SAAb,GAAyB,UAAzB;AACH;;AAED,qCAAa,WAAb,GAA2B,YAA3B;AACA,mCAAW,YAAX,CAAwB,YAAxB,EAAsC,WAAW,aAAX,CAAyB,uBAAzB,CAAtC;AACH;AACJ,iBAhED;AAiEH,aAnED;AAoEH;;;;;;;;;ACvEL;;AAGA;;AAEA,OAAO,MAAP,GAAgB,YAAW;;AAEvB,eAAK,IAAL;;AAGA;AACA,2BAAW,IAAX;AACH,CAPD;;AAHA","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export class Form {\n\n    // launch class methods\n    static init() {\n        this.dropdown();\n    }\n\n    static dropdown() {\n\n    }\n}\n","export class Styleguide {\r\n    static init() {\r\n        let testButtons = document.querySelectorAll('.states-input-buttons button');\r\n        testButtons.forEach(function(button) {\r\n\r\n            button.addEventListener('click', function(e) {\r\n                e.preventDefault();\r\n\r\n                let feedbackText = this.dataset.text;\r\n                let action = this.dataset.action;\r\n                let inputGroup = this.parentElement.parentElement;\r\n\r\n                switch(action) {\r\n                    case \"disabled\":\r\n                        disable(this);\r\n                        break;\r\n                    case \"reset\":\r\n                        reset();\r\n                        break;\r\n                    default:\r\n                        state();\r\n                        break;\r\n                }\r\n\r\n                // disable button\r\n                function disable(button) {\r\n                    let input = inputGroup.querySelector('input');\r\n\r\n                    input.disabled = !input.disabled;\r\n                    if(input.disabled) {\r\n                        button.innerHTML = \"Enable me\";\r\n                    } else {\r\n                        button.innerHTML = \"Disable me\";\r\n                    }\r\n                }\r\n\r\n                // reset state\r\n                function reset() {\r\n                    let disableButton = inputGroup.querySelector('.btn-grey');\r\n\r\n                    // cleanup potentially disabled state\r\n                    inputGroup.querySelector('input').disabled = false;\r\n                    disableButton.innerHTML = \"Disable me\";\r\n\r\n                    // remove states classes\r\n                    inputGroup.className = \"input-group\";\r\n\r\n                    // remove feedback state if exists\r\n                    inputGroup.querySelector('.feedback') ? inputGroup.querySelector('.feedback').remove() : null;\r\n                }\r\n\r\n                // change input state feedback\r\n                function state() {\r\n                    // clean up in case the input has been disabled\r\n                    inputGroup.querySelector('input').disabled = false;\r\n\r\n                    // add new class to input-group\r\n                    inputGroup.className = \"input-group \" + action;\r\n\r\n                    // replace the feedback span or create one\r\n                    let feedbackSpan = inputGroup.querySelector('.feedback');\r\n                    if(! feedbackSpan) {\r\n                        feedbackSpan = document.createElement('span');\r\n                        feedbackSpan.className = \"feedback\";\r\n                    }\r\n\r\n                    feedbackSpan.textContent = feedbackText;\r\n                    inputGroup.insertBefore(feedbackSpan, inputGroup.querySelector('.states-input-buttons'));\r\n                }\r\n            });\r\n        });\r\n    }\r\n}","import { Form } from './Form';\n\n// styleguide custom examples\nimport { Styleguide } from './Styleguide';\n\nwindow.onload = function() {\n\n    Form.init();\n\n\n    // styleguide custom examples\n    Styleguide.init();\n};"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmNcXHNjcmlwdFxcRm9ybS5qcyIsInNyY1xcc2NyaXB0XFxTdHlsZWd1aWRlLmpzIiwic3JjXFxzY3JpcHRcXG1haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lDQWEsSSxXQUFBLEk7Ozs7Ozs7OztBQUVUOytCQUNjO0FBQ1YsaUJBQUssUUFBTDtBQUNIOzs7bUNBRWlCLENBRWpCOzs7Ozs7Ozs7Ozs7Ozs7OztJQ1RRLFUsV0FBQSxVOzs7Ozs7OytCQUNLO0FBQ1YsZ0JBQUksY0FBYyxTQUFTLGdCQUFULENBQTBCLDhCQUExQixDQUFsQjtBQUNBLHdCQUFZLE9BQVosQ0FBb0IsVUFBUyxNQUFULEVBQWlCOztBQUVqQyx1QkFBTyxnQkFBUCxDQUF3QixPQUF4QixFQUFpQyxVQUFTLENBQVQsRUFBWTtBQUN6QyxzQkFBRSxjQUFGOztBQUVBLHdCQUFJLGVBQWUsS0FBSyxPQUFMLENBQWEsSUFBaEM7QUFDQSx3QkFBSSxTQUFTLEtBQUssT0FBTCxDQUFhLE1BQTFCO0FBQ0Esd0JBQUksYUFBYSxLQUFLLGFBQUwsQ0FBbUIsYUFBcEM7O0FBRUEsNEJBQU8sTUFBUDtBQUNJLDZCQUFLLFVBQUw7QUFDSSxvQ0FBUSxJQUFSO0FBQ0E7QUFDSiw2QkFBSyxPQUFMO0FBQ0k7QUFDQTtBQUNKO0FBQ0k7QUFDQTtBQVRSOztBQVlBO0FBQ0EsNkJBQVMsT0FBVCxDQUFpQixNQUFqQixFQUF5QjtBQUNyQiw0QkFBSSxRQUFRLFdBQVcsYUFBWCxDQUF5QixPQUF6QixDQUFaOztBQUVBLDhCQUFNLFFBQU4sR0FBaUIsQ0FBQyxNQUFNLFFBQXhCO0FBQ0EsNEJBQUcsTUFBTSxRQUFULEVBQW1CO0FBQ2YsbUNBQU8sU0FBUCxHQUFtQixXQUFuQjtBQUNILHlCQUZELE1BRU87QUFDSCxtQ0FBTyxTQUFQLEdBQW1CLFlBQW5CO0FBQ0g7QUFDSjs7QUFFRDtBQUNBLDZCQUFTLEtBQVQsR0FBaUI7QUFDYiw0QkFBSSxnQkFBZ0IsV0FBVyxhQUFYLENBQXlCLFdBQXpCLENBQXBCOztBQUVBO0FBQ0EsbUNBQVcsYUFBWCxDQUF5QixPQUF6QixFQUFrQyxRQUFsQyxHQUE2QyxLQUE3QztBQUNBLHNDQUFjLFNBQWQsR0FBMEIsWUFBMUI7O0FBRUE7QUFDQSxtQ0FBVyxTQUFYLEdBQXVCLGFBQXZCOztBQUVBO0FBQ0EsbUNBQVcsYUFBWCxDQUF5QixXQUF6QixJQUF3QyxXQUFXLGFBQVgsQ0FBeUIsV0FBekIsRUFBc0MsTUFBdEMsRUFBeEMsR0FBeUYsSUFBekY7QUFDSDs7QUFFRDtBQUNBLDZCQUFTLEtBQVQsR0FBaUI7QUFDYjtBQUNBLG1DQUFXLGFBQVgsQ0FBeUIsT0FBekIsRUFBa0MsUUFBbEMsR0FBNkMsS0FBN0M7O0FBRUE7QUFDQSxtQ0FBVyxTQUFYLEdBQXVCLGlCQUFpQixNQUF4Qzs7QUFFQTtBQUNBLDRCQUFJLGVBQWUsV0FBVyxhQUFYLENBQXlCLFdBQXpCLENBQW5CO0FBQ0EsNEJBQUcsQ0FBRSxZQUFMLEVBQW1CO0FBQ2YsMkNBQWUsU0FBUyxhQUFULENBQXVCLE1BQXZCLENBQWY7QUFDQSx5Q0FBYSxTQUFiLEdBQXlCLFVBQXpCO0FBQ0g7O0FBRUQscUNBQWEsV0FBYixHQUEyQixZQUEzQjtBQUNBLG1DQUFXLFlBQVgsQ0FBd0IsWUFBeEIsRUFBc0MsV0FBVyxhQUFYLENBQXlCLHVCQUF6QixDQUF0QztBQUNIO0FBQ0osaUJBaEVEO0FBaUVILGFBbkVEO0FBb0VIOzs7Ozs7Ozs7QUN2RUw7O0FBR0E7O0FBRUEsT0FBTyxNQUFQLEdBQWdCLFlBQVc7O0FBRXZCLGVBQUssSUFBTDs7QUFHQTtBQUNBLDJCQUFXLElBQVg7QUFDSCxDQVBEOztBQUhBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImV4cG9ydCBjbGFzcyBGb3JtIHtcblxuICAgIC8vIGxhdW5jaCBjbGFzcyBtZXRob2RzXG4gICAgc3RhdGljIGluaXQoKSB7XG4gICAgICAgIHRoaXMuZHJvcGRvd24oKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZHJvcGRvd24oKSB7XG5cbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgU3R5bGVndWlkZSB7XHJcbiAgICBzdGF0aWMgaW5pdCgpIHtcclxuICAgICAgICBsZXQgdGVzdEJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc3RhdGVzLWlucHV0LWJ1dHRvbnMgYnV0dG9uJyk7XHJcbiAgICAgICAgdGVzdEJ1dHRvbnMuZm9yRWFjaChmdW5jdGlvbihidXR0b24pIHtcclxuXHJcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgZmVlZGJhY2tUZXh0ID0gdGhpcy5kYXRhc2V0LnRleHQ7XHJcbiAgICAgICAgICAgICAgICBsZXQgYWN0aW9uID0gdGhpcy5kYXRhc2V0LmFjdGlvbjtcclxuICAgICAgICAgICAgICAgIGxldCBpbnB1dEdyb3VwID0gdGhpcy5wYXJlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQ7XHJcblxyXG4gICAgICAgICAgICAgICAgc3dpdGNoKGFjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkaXNhYmxlZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwicmVzZXRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZGlzYWJsZSBidXR0b25cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRpc2FibGUoYnV0dG9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlucHV0ID0gaW5wdXRHcm91cC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbnB1dC5kaXNhYmxlZCA9ICFpbnB1dC5kaXNhYmxlZDtcclxuICAgICAgICAgICAgICAgICAgICBpZihpbnB1dC5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gXCJFbmFibGUgbWVcIjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gXCJEaXNhYmxlIG1lXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHJlc2V0IHN0YXRlXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXNldCgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZGlzYWJsZUJ1dHRvbiA9IGlucHV0R3JvdXAucXVlcnlTZWxlY3RvcignLmJ0bi1ncmV5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNsZWFudXAgcG90ZW50aWFsbHkgZGlzYWJsZWQgc3RhdGVcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEdyb3VwLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlQnV0dG9uLmlubmVySFRNTCA9IFwiRGlzYWJsZSBtZVwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgc3RhdGVzIGNsYXNzZXNcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEdyb3VwLmNsYXNzTmFtZSA9IFwiaW5wdXQtZ3JvdXBcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGZlZWRiYWNrIHN0YXRlIGlmIGV4aXN0c1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0R3JvdXAucXVlcnlTZWxlY3RvcignLmZlZWRiYWNrJykgPyBpbnB1dEdyb3VwLnF1ZXJ5U2VsZWN0b3IoJy5mZWVkYmFjaycpLnJlbW92ZSgpIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjaGFuZ2UgaW5wdXQgc3RhdGUgZmVlZGJhY2tcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN0YXRlKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNsZWFuIHVwIGluIGNhc2UgdGhlIGlucHV0IGhhcyBiZWVuIGRpc2FibGVkXHJcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRHcm91cC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLmRpc2FibGVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBuZXcgY2xhc3MgdG8gaW5wdXQtZ3JvdXBcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEdyb3VwLmNsYXNzTmFtZSA9IFwiaW5wdXQtZ3JvdXAgXCIgKyBhY3Rpb247XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlcGxhY2UgdGhlIGZlZWRiYWNrIHNwYW4gb3IgY3JlYXRlIG9uZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBmZWVkYmFja1NwYW4gPSBpbnB1dEdyb3VwLnF1ZXJ5U2VsZWN0b3IoJy5mZWVkYmFjaycpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCEgZmVlZGJhY2tTcGFuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlZWRiYWNrU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmVlZGJhY2tTcGFuLmNsYXNzTmFtZSA9IFwiZmVlZGJhY2tcIjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZlZWRiYWNrU3Bhbi50ZXh0Q29udGVudCA9IGZlZWRiYWNrVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dEdyb3VwLmluc2VydEJlZm9yZShmZWVkYmFja1NwYW4sIGlucHV0R3JvdXAucXVlcnlTZWxlY3RvcignLnN0YXRlcy1pbnB1dC1idXR0b25zJykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEZvcm0gfSBmcm9tICcuL0Zvcm0nO1xuXG4vLyBzdHlsZWd1aWRlIGN1c3RvbSBleGFtcGxlc1xuaW1wb3J0IHsgU3R5bGVndWlkZSB9IGZyb20gJy4vU3R5bGVndWlkZSc7XG5cbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgIEZvcm0uaW5pdCgpO1xuXG5cbiAgICAvLyBzdHlsZWd1aWRlIGN1c3RvbSBleGFtcGxlc1xuICAgIFN0eWxlZ3VpZGUuaW5pdCgpO1xufTsiXX0="}