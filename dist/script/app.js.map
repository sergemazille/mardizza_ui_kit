{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/script/Form.js","src/script/Pagination.js","src/script/Styleguide.js","src/script/main.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export class Form {\n\n    // launch class methods\n    static init() {\n        this.dropdown();\n    }\n\n    static dropdown() {\n        let dropdownTriggers = document.querySelectorAll('.dropdown-trigger');\n        [...dropdownTriggers].forEach(function(button) { // spread operator so IE accepts to loop through querySelectorAll result\n\n            // trigger event\n            let $dropdownList = button.parentElement.querySelector('.dropdown-list');\n            let dropdownActive = false;\n\n            button.addEventListener(\"click\", function(e) {\n                e.preventDefault();\n                $dropdownList.style.display = ($dropdownList.style.display == \"\") ? \"block\" : \"\";\n                dropdownActive = $dropdownList.style.display == \"block\";\n\n                // create a clickable `div` to close the dropdown when user clicks outside of the dropdown element\n                if(dropdownActive) {\n                    let $clickable = document.createElement('div');\n                    $clickable.className = \"backdrop\";\n\n                    let $body = document.querySelector('body');\n                    $body.appendChild($clickable);\n\n                    $clickable.addEventListener(\"click\", function() {\n                        $dropdownList.style.display = \"\";\n                        dropdownActive = false;\n                        $clickable.removeEventListener(\"click\", this);\n                        this.remove();\n                    });\n                }\n            });\n\n            // choice event\n            let $anchorTags = $dropdownList.querySelectorAll('a');\n            [...$anchorTags].forEach(function(anchor) { // spread operator so IE accepts to loop through querySelectorAll result\n                anchor.addEventListener(\"click\", function(e) {\n                    e.preventDefault();\n                    let selectionOption = anchor.text;\n\n                    // cleanup previously selected list item (remove active class)\n                    let $currentActiveListItem = $dropdownList.querySelector('li.active');\n                    $currentActiveListItem.classList.remove('active');\n\n                    // select clicked list item by giving it `active` class and changing button label text\n                    anchor.parentElement.classList.add('active');\n                    button.innerHTML = selectionOption;\n\n                    // close the dropdown-list\n                    $dropdownList.style.display = \"\";\n\n                    // cleanup : remove opened backdrop\n                    let $backdrop = document.querySelector('.backdrop');\n                    $backdrop.remove();\n                });\n            });\n        });\n    }\n}\n","export class Pagination {\n\n    // launch class methods\n    static init() {\n        Pagination.pagination();\n    }\n\n    static pagination() {\n        let pagination = document.querySelector('.pagination');\n        let prevItem = pagination.querySelector('.prev');\n        let nextItem = pagination.querySelector('.next');\n        let activeItem = pagination.querySelector('.active');\n        let items = pagination.querySelectorAll('li');\n\n        // set / reset items\n        [...items].forEach(function(item, i) {\n            if(item.classList.contains('ellipsis')) { item.firstElementChild.textContent = i; }\n            item.classList.remove('hidden', 'show', 'ellipsis', 'disabled');\n            item.dataset.page = i;\n        });\n\n        let activeItemIndex = parseInt(activeItem.dataset.page);\n\n        /* add appropriate classes : */\n\n        // disable 'prev' button if active page is the first one\n        if(activeItemIndex == 1) {\n            prevItem.classList.add('disabled');\n            items[3].classList.add('show'); // if active page is 1, the third item is displayed\n        }\n\n        // disable 'next' button if active page is the last one\n        if(activeItemIndex == (items.length - 2)) {\n            nextItem.classList.add('disabled');\n            items[(items.length - 4)].classList.add('show');\n        }\n\n        // first ellipsis check\n        if(activeItemIndex >= 4) { items[2].classList.add('ellipsis', 'show'); }\n\n        // last ellipsis check\n        if(activeItemIndex <= (items.length - 5)) { items[(items.length - 3)].classList.add('ellipsis', 'show'); }\n\n        // active item, previous and next ones\n        items[(activeItemIndex - 1)].classList.add('show');\n        items[activeItemIndex].classList.add('show');\n        items[(activeItemIndex + 1)].classList.add('show');\n\n        // prev, next, first and last pages are displayed as well\n        prevItem.classList.add('show');\n        nextItem.classList.add('show');\n        items[1].classList.add('show');\n        items[(items.length - 2)].classList.add('show');\n\n        // hide every other items\n        [...items].forEach(function(item) { // spread operator so IE accepts to loop through querySelectorAll result\n            if(! item.classList.contains('show')) {\n                item.classList.add('hidden');\n            }\n        });\n\n        // replace 'ellipsis' class list item content with 3 dots\n        let ellipsisItems = document.querySelectorAll('li.ellipsis');\n        [...ellipsisItems].forEach(function(item) { // spread operator so IE accepts to loop through querySelectorAll result\n            item.querySelector('a').textContent = \"...\";\n        });\n    }\n}\n","import { Pagination } from './Pagination';\r\n\r\nexport class Styleguide {\r\n    static init() {\r\n        Styleguide.inputFeedback();\r\n        Styleguide.pagination();\r\n    }\r\n\r\n    static inputFeedback() {\r\n        let testButtons = document.querySelectorAll('.states-input-buttons button');\r\n        [...testButtons].forEach(function(button) { // spread operator so IE accepts to loop through querySelectorAll result\r\n\r\n            button.addEventListener('click', function(e) {\r\n                e.preventDefault();\r\n\r\n                let feedbackText = this.dataset.text;\r\n                let action = this.dataset.action;\r\n                let inputGroup = this.parentElement.parentElement;\r\n\r\n                switch(action) {\r\n                    case \"disabled\":\r\n                        disable(this);\r\n                        break;\r\n                    case \"reset\":\r\n                        reset();\r\n                        break;\r\n                    default:\r\n                        state();\r\n                        break;\r\n                }\r\n\r\n                // disable button\r\n                function disable(button) {\r\n                    let input = inputGroup.querySelector('input');\r\n\r\n                    input.disabled = !input.disabled;\r\n                    if(input.disabled) {\r\n                        button.innerHTML = \"Enable me\";\r\n                    } else {\r\n                        button.innerHTML = \"Disable me\";\r\n                    }\r\n                }\r\n\r\n                // reset state\r\n                function reset() {\r\n                    let disableButton = inputGroup.querySelector('.btn-grey');\r\n\r\n                    // cleanup potentially disabled state\r\n                    inputGroup.querySelector('input').disabled = false;\r\n                    disableButton.innerHTML = \"Disable me\";\r\n\r\n                    // remove states classes\r\n                    inputGroup.className = \"input-group\";\r\n\r\n                    // remove feedback state if exists\r\n                    inputGroup.querySelector('.feedback') ? inputGroup.querySelector('.feedback').remove() : null;\r\n                }\r\n\r\n                // change input state feedback\r\n                function state() {\r\n                    // clean up in case the input has been disabled\r\n                    inputGroup.querySelector('input').disabled = false;\r\n\r\n                    // add new class to input-group\r\n                    inputGroup.className = \"input-group \" + action;\r\n\r\n                    // replace the feedback span or create one\r\n                    let feedbackSpan = inputGroup.querySelector('.feedback');\r\n                    if(! feedbackSpan) {\r\n                        feedbackSpan = document.createElement('span');\r\n                        feedbackSpan.className = \"feedback\";\r\n                    }\r\n\r\n                    feedbackSpan.textContent = feedbackText;\r\n                    inputGroup.insertBefore(feedbackSpan, inputGroup.querySelector('.states-input-buttons'));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    static pagination() {\r\n        let pagination = document.querySelector('.pagination');\r\n        let items = pagination.querySelectorAll('li');\r\n\r\n        [...items].forEach(function(item) {\r\n            item.addEventListener(\"click\", function(e) {\r\n                e.preventDefault();\r\n\r\n                let activeItemIndex = parseInt(pagination.querySelector('.active').dataset.page);\r\n\r\n                // remove active class from old active item\r\n                items[activeItemIndex].classList.remove('active');\r\n\r\n                // prev & next cases\r\n                if(item.classList.contains('prev')) {\r\n                    items[activeItemIndex - 1].classList.add('active');\r\n                } else if(item.classList.contains('next')) {\r\n                    items[activeItemIndex + 1].classList.add('active');\r\n                } else {\r\n                    // selected new active page\r\n                    item.classList.add('active');\r\n                }\r\n\r\n                // relaunch function for demo purpose\r\n                Pagination.pagination();\r\n            });\r\n        });\r\n    }\r\n}","import { Form } from './Form';\nimport { Pagination } from './Pagination';\n\n// styleguide custom examples\nimport { Styleguide } from './Styleguide';\n\nwindow.onload = function() {\n\n    Form.init();\n    Pagination.init();\n\n    // styleguide custom examples\n    Styleguide.init();\n};"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}