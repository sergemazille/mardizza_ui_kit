{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/script/Form.js","src/script/Notification.js","src/script/Pagination.js","src/script/Styleguide.js","src/script/Tab.js","src/script/Utils.js","src/script/main.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export class Form {\n\n    // launch class methods\n    static init() {\n        this.dropdown();\n    }\n\n    static dropdown() {\n        let dropdownTriggers = document.querySelectorAll('.dropdown-trigger');\n        [...dropdownTriggers].forEach(function(button) { // spread operator so IE accepts to loop through querySelectorAll result\n\n            // trigger event\n            let $dropdownList = button.parentElement.querySelector('.dropdown-list');\n            let dropdownActive = false;\n\n            button.addEventListener(\"click\", function(e) {\n                e.preventDefault();\n                $dropdownList.style.display = ($dropdownList.style.display == \"\") ? \"block\" : \"\";\n                dropdownActive = $dropdownList.style.display == \"block\";\n\n                // create a clickable `div` to close the dropdown when user clicks outside of the dropdown element\n                if(dropdownActive) {\n                    let $clickable = document.createElement('div');\n                    $clickable.className = \"backdrop\";\n\n                    let $body = document.querySelector('body');\n                    $body.appendChild($clickable);\n\n                    $clickable.addEventListener(\"click\", function() {\n                        $dropdownList.style.display = \"\";\n                        dropdownActive = false;\n                        $clickable.removeEventListener(\"click\", this);\n                        this.remove();\n                    });\n                }\n            });\n\n            // choice event\n            let $anchorTags = $dropdownList.querySelectorAll('a');\n            [...$anchorTags].forEach(function(anchor) { // spread operator so IE accepts to loop through querySelectorAll result\n                anchor.addEventListener(\"click\", function(e) {\n                    e.preventDefault();\n                    let selectionOption = anchor.text;\n\n                    // cleanup previously selected list item (remove active class)\n                    let $currentActiveListItem = $dropdownList.querySelector('li.active');\n                    $currentActiveListItem.classList.remove('active');\n\n                    // select clicked list item by giving it `active` class and changing button label text\n                    anchor.parentElement.classList.add('active');\n                    button.innerHTML = selectionOption;\n\n                    // close the dropdown-list\n                    $dropdownList.style.display = \"\";\n\n                    // cleanup : remove opened backdrop\n                    let $backdrop = document.querySelector('.backdrop');\n                    $backdrop.remove();\n                });\n            });\n        });\n    }\n}\n","import * as Utils from './Utils';\r\n\r\nconst FADEOUT_DURATION = 4 * 1000;\r\n\r\nexport class Notification {\r\n\r\n    // initialize notification behaviour\r\n    static init() {\r\n        this.setupContainer();\r\n        this.removeOnClickEvent();\r\n    }\r\n\r\n    // create or cleanup notifications container\r\n    static setupContainer()  {\r\n        let container = document.querySelector('#notification-container');\r\n\r\n        // remove eventual existing container element to start clean\r\n        if(null != container) { container.remove(); }\r\n\r\n        // create and append the notification container as body first element\r\n        container = document.createElement('div');\r\n        container.id = 'notification-container';\r\n        let firstPageElement = document.body.firstElementChild;\r\n        document.body.insertBefore(container, firstPageElement);\r\n    }\r\n\r\n    // set message text and notification type (success, info, warning, error)\r\n    static create(message, type, isSticky = false) {\r\n        let container = document.querySelector('#notification-container');\r\n\r\n        let notification = document.createElement('div');\r\n        notification.classList.add(`notification-${type}`);\r\n        if(isSticky) { notification.classList.add('stick'); } // sticky notifications might be used for long messages\r\n        notification.textContent = message;\r\n        container.appendChild(notification);\r\n\r\n        // animate in\r\n        setTimeout(\r\n            function() {\r\n                notification.classList.add('in');\r\n\r\n                // fade out notification (unless it has 'stick' class)\r\n                if(! notification.classList.contains('stick')) { Notification.clean(notification); }\r\n            }, 100\r\n        );\r\n    }\r\n\r\n    // remove old notifications\r\n    static clean(notification, duration = FADEOUT_DURATION) {\r\n        // fadeout notification after specified duration in milliseconds (default = FADEOUT_DURATION)\r\n        setTimeout(\r\n            function() {\r\n                notification.classList.remove('in');\r\n                Notification.clear(notification);\r\n            }, duration\r\n        );\r\n    }\r\n\r\n    static clear(notification) {\r\n        // remove notification from DOM once its fadeout animation has ended (about 1s to be sure)\r\n        setTimeout(\r\n            function() {\r\n                notification.remove();\r\n            }, 1000\r\n        );\r\n    }\r\n\r\n    // add click event on 'document' for notifications that will be added later on the DOM\r\n    static removeOnClickEvent() {\r\n        // notifications are removed when clicked on\r\n        document.body.addEventListener(\"click\", function(e) {\r\n            let element = e.target;\r\n            if(Utils.hasClass(element, 'in')) { Notification.clean(element, 0) }\r\n        });\r\n    }\r\n\r\n    // getter\r\n    static get fadeoutDuration() {\r\n        return FADEOUT_DURATION;\r\n    }\r\n}","export class Pagination {\n\n    // launch class methods\n    static init() {\n        Pagination.pagination();\n    }\n\n    static pagination() {\n        let pagination = document.querySelector('.pagination');\n        let prevItem = pagination.querySelector('.prev');\n        let nextItem = pagination.querySelector('.next');\n        let activeItem = pagination.querySelector('.active');\n        let items = pagination.querySelectorAll('li');\n\n        // set / reset items\n        [...items].forEach(function(item, i) {\n            if(item.classList.contains('ellipsis')) { item.firstElementChild.textContent = i; }\n            item.classList.remove('hidden', 'show', 'ellipsis', 'disabled');\n            item.dataset.page = i;\n        });\n\n        let activeItemIndex = parseInt(activeItem.dataset.page);\n\n        /* add appropriate classes : */\n\n        // disable 'prev' button if active page is the first one\n        if(activeItemIndex == 1) {\n            prevItem.classList.add('disabled');\n            items[3].classList.add('show'); // if active page is 1, the third item is displayed\n        }\n\n        // disable 'next' button if active page is the last one\n        if(activeItemIndex == (items.length - 2)) {\n            nextItem.classList.add('disabled');\n            items[(items.length - 4)].classList.add('show');\n        }\n\n        // first ellipsis check\n        if(activeItemIndex >= 4) { items[2].classList.add('ellipsis', 'show'); }\n\n        // last ellipsis check\n        if(activeItemIndex <= (items.length - 5)) { items[(items.length - 3)].classList.add('ellipsis', 'show'); }\n\n        // active item, previous and next ones\n        items[(activeItemIndex - 1)].classList.add('show');\n        items[activeItemIndex].classList.add('show');\n        items[(activeItemIndex + 1)].classList.add('show');\n\n        // prev, next, first and last pages are displayed as well\n        prevItem.classList.add('show');\n        nextItem.classList.add('show');\n        items[1].classList.add('show');\n        items[(items.length - 2)].classList.add('show');\n\n        // hide every other items\n        [...items].forEach(function(item) { // spread operator so IE accepts to loop through querySelectorAll result\n            if(! item.classList.contains('show')) {\n                item.classList.add('hidden');\n            }\n        });\n\n        // replace 'ellipsis' class list item content with 3 dots\n        let ellipsisItems = document.querySelectorAll('li.ellipsis');\n        [...ellipsisItems].forEach(function(item) { // spread operator so IE accepts to loop through querySelectorAll result\n            item.querySelector('a').textContent = \"...\";\n        });\n    }\n}\n","import { Pagination } from './Pagination';\r\nimport { Notification } from './Notification';\r\n\r\nexport class Styleguide {\r\n    static init() {\r\n        Styleguide.inputFeedback();\r\n        Styleguide.pagination();\r\n        Styleguide.notification();\r\n    }\r\n\r\n    static inputFeedback() {\r\n        let testButtons = document.querySelectorAll('.states-input-buttons button');\r\n        [...testButtons].forEach(function(button) { // spread operator so IE accepts to loop through querySelectorAll result\r\n\r\n            button.addEventListener('click', function(e) {\r\n                e.preventDefault();\r\n\r\n                let feedbackText = this.dataset.text;\r\n                let action = this.dataset.action;\r\n                let inputGroup = document.querySelector('.states-input-test .input-group');\r\n\r\n                switch(action) {\r\n                    case \"disabled\":\r\n                        disable(this);\r\n                        break;\r\n                    case \"reset\":\r\n                        reset();\r\n                        break;\r\n                    default:\r\n                        state();\r\n                        break;\r\n                }\r\n\r\n                // disable button\r\n                function disable(button) {\r\n                    let input = inputGroup.querySelector('input');\r\n\r\n                    input.disabled = !input.disabled;\r\n                    if(input.disabled) {\r\n                        button.innerHTML = \"Enable input\";\r\n                    } else {\r\n                        button.innerHTML = \"Disable input\";\r\n                    }\r\n                }\r\n\r\n                // reset state\r\n                function reset() {\r\n                    let disableButton = inputGroup.querySelector('.btn-grey');\r\n\r\n                    // cleanup potentially disabled state\r\n                    inputGroup.querySelector('input').disabled = false;\r\n                    disableButton.innerHTML = \"Disable input\";\r\n\r\n                    // remove states classes\r\n                    inputGroup.className = \"input-group\";\r\n\r\n                    // remove feedback state if exists\r\n                    inputGroup.querySelector('.feedback') ? inputGroup.querySelector('.feedback').remove() : null;\r\n                }\r\n\r\n                // change input state feedback\r\n                function state() {\r\n                    // clean up in case the input has been disabled\r\n                    inputGroup.querySelector('input').disabled = false;\r\n\r\n                    // add new class to input-group\r\n                    inputGroup.className = \"input-group \" + action;\r\n\r\n                    // replace the feedback span or create one\r\n                    let feedbackSpan = inputGroup.querySelector('.feedback');\r\n                    if(! feedbackSpan) {\r\n                        feedbackSpan = document.createElement('span');\r\n                        feedbackSpan.className = \"feedback\";\r\n                    }\r\n\r\n                    feedbackSpan.textContent = feedbackText;\r\n                    inputGroup.insertBefore(feedbackSpan, inputGroup.querySelector('.states-input-buttons'));\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    static pagination() {\r\n        let pagination = document.querySelector('.pagination');\r\n        let items = pagination.querySelectorAll('li');\r\n\r\n        [...items].forEach(function(item) {\r\n            item.addEventListener(\"click\", function(e) {\r\n                e.preventDefault();\r\n\r\n                let activeItemIndex = parseInt(pagination.querySelector('.active').dataset.page);\r\n\r\n                // remove active class from old active item\r\n                items[activeItemIndex].classList.remove('active');\r\n\r\n                // prev & next cases\r\n                if(item.classList.contains('prev')) {\r\n                    items[activeItemIndex - 1].classList.add('active');\r\n                } else if(item.classList.contains('next')) {\r\n                    items[activeItemIndex + 1].classList.add('active');\r\n                } else {\r\n                    // selected new active page\r\n                    item.classList.add('active');\r\n                }\r\n\r\n                // relaunch function for demo purpose\r\n                Pagination.pagination();\r\n            });\r\n        });\r\n    }\r\n\r\n    static notification() {\r\n\r\n        // standard buttons (non-sticky notifications)\r\n        let standardNotificationButtons = document.querySelectorAll('.standard-notifications button');\r\n\r\n        [...standardNotificationButtons].forEach(function(button) {\r\n            let notificationText = button.textContent;\r\n            let notificationType = button.className.slice(4);\r\n\r\n            button.addEventListener(\"click\", function(e) {\r\n                e.preventDefault();\r\n\r\n                Notification.create(notificationText, notificationType);\r\n            });\r\n        });\r\n\r\n        // sticky notification button\r\n        let stickyButton = document.querySelector('.notifications-test .btn-primary');\r\n        stickyButton.addEventListener(\"click\", function(e) {\r\n            e.preventDefault();\r\n\r\n            let notificationText = stickyButton.textContent;\r\n            let isSticky = true;\r\n            Notification.create(notificationText, \"info\", isSticky);\r\n        });\r\n    }\r\n}","import * as Utils from './Utils';\r\n\r\nlet visibleTabContentIds;\r\n\r\nexport class Tab {\r\n\r\n    // launch class methods\r\n    static init() {\r\n        this.tab();\r\n    }\r\n\r\n    static tab() {\r\n        // update active tab(s)\r\n        this.updateActiveContentIds();\r\n\r\n        // hide non active content at page start up (show still display active content)\r\n        this.hideNonActiveContent();\r\n\r\n        // menu behaviour\r\n        let tabMenuLinks = document.querySelectorAll('.tabs-menu a');\r\n        [...tabMenuLinks].forEach(function(link) {\r\n            link.addEventListener(\"click\", function(e) {\r\n                e.preventDefault();\r\n                // get link owning tab\r\n                let tabs = Utils.closest(link, 'tabs');\r\n\r\n                // hide current active content\r\n                let activeMenuTab = tabs.querySelector('.active');\r\n                if(null != activeMenuTab) { activeMenuTab.classList.remove('active'); }\r\n\r\n                // add 'active' class to link parent\r\n                link.parentElement.classList.add('active');\r\n\r\n                // and finally update DOM\r\n                Tab.updateActiveContentIds();\r\n                Tab.hideNonActiveContent();\r\n            });\r\n        });\r\n    }\r\n\r\n    static updateActiveContentIds() {\r\n        visibleTabContentIds = new Set(); // start clean\r\n        let activeTabMenus = document.querySelectorAll('.tabs-menu .active');\r\n        [...activeTabMenus].forEach(function(tabMenu) {\r\n            let targetId = tabMenu.firstElementChild.getAttribute('href').slice(1); // remove the # symbol\r\n            visibleTabContentIds.add(targetId);\r\n        });\r\n    }\r\n\r\n    static hideNonActiveContent() {\r\n        let tabContents = document.querySelectorAll('.tabs .tabs-content');\r\n        [...tabContents].forEach(function(contentBlock) {\r\n            [...contentBlock.children].forEach(function(content) {\r\n                // start clean by removing 'hidden' class\r\n                content.classList.remove('hidden');\r\n\r\n                // hide contents that are not in an active state tab\r\n                if(! visibleTabContentIds.has(content.id)) {\r\n                    content.classList.add('hidden');\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n","export function hasClass(element, className) {\r\n    return element.classList.contains(className);\r\n}\r\n\r\nexport function closest(element, className) {\r\n    let parent;\r\n\r\n    while(element) {\r\n        parent = element.parentElement;\r\n\r\n        if(hasClass(parent, className)) {\r\n            return parent;\r\n        }\r\n\r\n        element = parent;\r\n    };\r\n\r\n    return null;\r\n}","import { Form } from './Form';\nimport { Pagination } from './Pagination';\nimport { Notification } from './Notification';\nimport { Tab } from './Tab';\n\n// styleguide custom examples\nimport { Styleguide } from './Styleguide';\n\nwindow.onload = function() {\n\n    Form.init();\n    Pagination.init();\n    Notification.init();\n    Tab.init();\n\n    // styleguide custom examples\n    Styleguide.init();\n};"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}