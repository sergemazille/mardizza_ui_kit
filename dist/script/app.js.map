{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/script/Form.js","src/script/Pagination.js","src/script/Styleguide.js","src/script/main.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export class Form {\n\n    // launch class methods\n    static init() {\n        this.dropdown();\n    }\n\n    static dropdown() {\n        let dropdownTriggers = document.querySelectorAll('.dropdown-trigger');\n        dropdownTriggers.forEach(function(button) {\n\n            // trigger event\n            let $dropdownList = button.parentElement.querySelector('.dropdown-list');\n            let dropdownActive = false;\n\n            button.addEventListener(\"click\", function(e) {\n                e.preventDefault();\n                $dropdownList.style.display = ($dropdownList.style.display == \"\") ? \"block\" : \"\";\n                dropdownActive = $dropdownList.style.display == \"block\";\n\n                // create a clickable `div` to close the dropdown when user clicks outside of the dropdown element\n                if(dropdownActive) {\n                    let $clickable = document.createElement('div');\n                    $clickable.className = \"backdrop\";\n\n                    let $body = document.querySelector('body');\n                    $body.appendChild($clickable);\n\n                    $clickable.addEventListener(\"click\", function() {\n                        $dropdownList.style.display = \"\";\n                        dropdownActive = false;\n                        $clickable.removeEventListener(\"click\", this);\n                        this.remove();\n                    });\n                }\n            });\n\n            // choice event\n            $dropdownList.querySelectorAll('a').forEach(function(anchor) {\n                anchor.addEventListener(\"click\", function(e) {\n                    e.preventDefault();\n                    let selectionOption = anchor.text;\n\n                    // cleanup previously selected list item (remove active class)\n                    let $currentActiveListItem = $dropdownList.querySelector('li.active');\n                    $currentActiveListItem.classList.remove('active');\n\n                    // select clicked list item by giving it `active` class and changing button label text\n                    anchor.parentElement.classList.add('active');\n                    button.innerHTML = selectionOption;\n\n                    // close the dropdown-list\n                    $dropdownList.style.display = \"\";\n\n                    // cleanup : remove opened backdrop\n                    let $backdrop = document.querySelector('.backdrop');\n                    $backdrop.remove();\n                });\n            });\n        });\n    }\n}\n","export class Pagination {\n\n    // launch class methods\n    static init() {\n        this.pagination();\n    }\n\n    static pagination() {\n        let pagination = document.querySelector('.pagination');\n        let prevItem = pagination.querySelector('.prev');\n        let nextItem = pagination.querySelector('.next');\n        let items = pagination.querySelectorAll('li');\n        let itemsToKeep = new Map();\n        let activeItemIndex;\n\n        // tests to get activeItemIndex right away\n\n\n\n        // store in a Map the items to display\n        items.forEach(function(item, i) {\n            // first and last two items are always displayed\n            if(0 == i || 1 == i || (items.length - 2) == i || (items.length - 1) == i) {\n                itemsToKeep.set(i, item);\n            }\n\n            // active items, its previous and next items, are displayed as well\n            if(item.classList.contains('active')) {\n                itemsToKeep.set(i-1, items[i-1]);\n                itemsToKeep.set(i, item);\n                itemsToKeep.set(i+1, items[i+1]);\n\n                activeItemIndex = i; // store the information for later use\n            }\n        });\n\n        /* add appropriate classes : */\n\n        // disable 'prev' button if active page is the first one\n        if(activeItemIndex == 1) {\n            prevItem.classList.add('disabled');\n            items[3].classList.add('show'); // if active page is 1, the third item is displayed\n        }\n\n        // disable 'next' button if active page is the last one\n        if(activeItemIndex == (items.length - 2)) {\n            nextItem.classList.add('disabled');\n            items[(items.length - 4)].classList.add('show');\n        }\n\n        // first ellipsis check\n        if(activeItemIndex >= 4) { items[2].classList.add('ellipsis', 'show'); }\n\n        // last ellipsis check\n        if(activeItemIndex <= (items.length - 5)) { items[(items.length - 3)].classList.add('ellipsis', 'show'); }\n\n        // active item, previous and next ones\n        items[(activeItemIndex - 1)].classList.add('show');\n        items[activeItemIndex].classList.add('show');\n        items[(activeItemIndex + 1)].classList.add('show');\n\n        // prev, next, first and last pages are displayed as well\n        prevItem.classList.add('show');\n        nextItem.classList.add('show');\n        items[1].classList.add('show');\n        items[(items.length - 2)].classList.add('show');\n\n        // hide every other items\n        items.forEach(function(item) {\n            if(! item.classList.contains('show')) {\n                item.classList.add('hidden');\n            }\n        });\n\n        // replace 'ellipsis' class list item content with 3 dots\n        let ellipsisItems = document.querySelectorAll('li.ellipsis');\n        ellipsisItems.forEach(function(item) {\n            item.querySelector('a').textContent = \"...\";\n        });\n    }\n}\n","export class Styleguide {\n    static init() {\n        let testButtons = document.querySelectorAll('.states-input-buttons button');\n        testButtons.forEach(function(button) {\n\n            button.addEventListener('click', function(e) {\n                e.preventDefault();\n\n                let feedbackText = this.dataset.text;\n                let action = this.dataset.action;\n                let inputGroup = this.parentElement.parentElement;\n\n                switch(action) {\n                    case \"disabled\":\n                        disable(this);\n                        break;\n                    case \"reset\":\n                        reset();\n                        break;\n                    default:\n                        state();\n                        break;\n                }\n\n                // disable button\n                function disable(button) {\n                    let input = inputGroup.querySelector('input');\n\n                    input.disabled = !input.disabled;\n                    if(input.disabled) {\n                        button.innerHTML = \"Enable me\";\n                    } else {\n                        button.innerHTML = \"Disable me\";\n                    }\n                }\n\n                // reset state\n                function reset() {\n                    let disableButton = inputGroup.querySelector('.btn-grey');\n\n                    // cleanup potentially disabled state\n                    inputGroup.querySelector('input').disabled = false;\n                    disableButton.innerHTML = \"Disable me\";\n\n                    // remove states classes\n                    inputGroup.className = \"input-group\";\n\n                    // remove feedback state if exists\n                    inputGroup.querySelector('.feedback') ? inputGroup.querySelector('.feedback').remove() : null;\n                }\n\n                // change input state feedback\n                function state() {\n                    // clean up in case the input has been disabled\n                    inputGroup.querySelector('input').disabled = false;\n\n                    // add new class to input-group\n                    inputGroup.className = \"input-group \" + action;\n\n                    // replace the feedback span or create one\n                    let feedbackSpan = inputGroup.querySelector('.feedback');\n                    if(! feedbackSpan) {\n                        feedbackSpan = document.createElement('span');\n                        feedbackSpan.className = \"feedback\";\n                    }\n\n                    feedbackSpan.textContent = feedbackText;\n                    inputGroup.insertBefore(feedbackSpan, inputGroup.querySelector('.states-input-buttons'));\n                }\n            });\n        });\n    }\n}","import { Form } from './Form';\nimport { Pagination } from './Pagination';\n\n// styleguide custom examples\nimport { Styleguide } from './Styleguide';\n\nwindow.onload = function() {\n\n    Form.init();\n    Pagination.init();\n\n    // styleguide custom examples\n    Styleguide.init();\n};"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvc2NyaXB0L0Zvcm0uanMiLCJzcmMvc2NyaXB0L1BhZ2luYXRpb24uanMiLCJzcmMvc2NyaXB0L1N0eWxlZ3VpZGUuanMiLCJzcmMvc2NyaXB0L21haW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0lDQWEsSSxXQUFBLEk7Ozs7Ozs7OztBQUVUOytCQUNjO0FBQ1YsaUJBQUssUUFBTDtBQUNIOzs7bUNBRWlCO0FBQ2QsZ0JBQUksbUJBQW1CLFNBQVMsZ0JBQVQsQ0FBMEIsbUJBQTFCLENBQXZCO0FBQ0EsNkJBQWlCLE9BQWpCLENBQXlCLFVBQVMsTUFBVCxFQUFpQjs7QUFFdEM7QUFDQSxvQkFBSSxnQkFBZ0IsT0FBTyxhQUFQLENBQXFCLGFBQXJCLENBQW1DLGdCQUFuQyxDQUFwQjtBQUNBLG9CQUFJLGlCQUFpQixLQUFyQjs7QUFFQSx1QkFBTyxnQkFBUCxDQUF3QixPQUF4QixFQUFpQyxVQUFTLENBQVQsRUFBWTtBQUN6QyxzQkFBRSxjQUFGO0FBQ0Esa0NBQWMsS0FBZCxDQUFvQixPQUFwQixHQUErQixjQUFjLEtBQWQsQ0FBb0IsT0FBcEIsSUFBK0IsRUFBaEMsR0FBc0MsT0FBdEMsR0FBZ0QsRUFBOUU7QUFDQSxxQ0FBaUIsY0FBYyxLQUFkLENBQW9CLE9BQXBCLElBQStCLE9BQWhEOztBQUVBO0FBQ0Esd0JBQUcsY0FBSCxFQUFtQjtBQUFBO0FBQ2YsZ0NBQUksYUFBYSxTQUFTLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBakI7QUFDQSx1Q0FBVyxTQUFYLEdBQXVCLFVBQXZCOztBQUVBLGdDQUFJLFFBQVEsU0FBUyxhQUFULENBQXVCLE1BQXZCLENBQVo7QUFDQSxrQ0FBTSxXQUFOLENBQWtCLFVBQWxCOztBQUVBLHVDQUFXLGdCQUFYLENBQTRCLE9BQTVCLEVBQXFDLFlBQVc7QUFDNUMsOENBQWMsS0FBZCxDQUFvQixPQUFwQixHQUE4QixF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O0FBQ0g7O0FBRUQ7QUFDQSw2QkFBUyxLQUFULEdBQWlCO0FBQ2I7QUFDQSxtQ0FBVyxhQUFYLENBQXlCLE9BQXpCLEVBQWtDLFFBQWxDLEdBQTZDLEtBQTdDOztBQUVBO0FBQ0EsbUNBQVcsU0FBWCxHQUF1QixpQkFBaUIsTUFBeEM7O0FBRUE7QUFDQSw0QkFBSSxlQUFlLFdBQVcsYUFBWCxDQUF5QixXQUF6QixDQUFuQjtBQUNBLDRCQUFHLENBQUUsWUFBTCxFQUFtQjtBQUNmLDJDQUFlLFNBQVMsYUFBVCxDQUF1QixNQUF2QixDQUFmO0FBQ0EseUNBQWEsU0FBYixHQUF5QixVQUF6QjtBQUNIOztBQUVELHFDQUFhLFdBQWIsR0FBMkIsWUFBM0I7QUFDQSxtQ0FBVyxZQUFYLENBQXdCLFlBQXhCLEVBQXNDLFdBQVcsYUFBWCxDQUF5Qix1QkFBekIsQ0FBdEM7QUFDSDtBQUNKLGlCQWhFRDtBQWlFSCxhQW5FRDtBQW9FSDs7Ozs7Ozs7O0FDdkVMOztBQUNBOztBQUdBOztBQUVBLE9BQU8sTUFBUCxHQUFnQixZQUFXOztBQUV2QixlQUFLLElBQUw7QUFDQSwyQkFBVyxJQUFYOztBQUVBO0FBQ0EsMkJBQVcsSUFBWDtBQUNILENBUEQ7O0FBSEEiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiZXhwb3J0IGNsYXNzIEZvcm0ge1xuXG4gICAgLy8gbGF1bmNoIGNsYXNzIG1ldGhvZHNcbiAgICBzdGF0aWMgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5kcm9wZG93bigpO1xuICAgIH1cblxuICAgIHN0YXRpYyBkcm9wZG93bigpIHtcbiAgICAgICAgbGV0IGRyb3Bkb3duVHJpZ2dlcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZHJvcGRvd24tdHJpZ2dlcicpO1xuICAgICAgICBkcm9wZG93blRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24oYnV0dG9uKSB7XG5cbiAgICAgICAgICAgIC8vIHRyaWdnZXIgZXZlbnRcbiAgICAgICAgICAgIGxldCAkZHJvcGRvd25MaXN0ID0gYnV0dG9uLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmRyb3Bkb3duLWxpc3QnKTtcbiAgICAgICAgICAgIGxldCBkcm9wZG93bkFjdGl2ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgJGRyb3Bkb3duTGlzdC5zdHlsZS5kaXNwbGF5ID0gKCRkcm9wZG93bkxpc3Quc3R5bGUuZGlzcGxheSA9PSBcIlwiKSA/IFwiYmxvY2tcIiA6IFwiXCI7XG4gICAgICAgICAgICAgICAgZHJvcGRvd25BY3RpdmUgPSAkZHJvcGRvd25MaXN0LnN0eWxlLmRpc3BsYXkgPT0gXCJibG9ja1wiO1xuXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgY2xpY2thYmxlIGBkaXZgIHRvIGNsb3NlIHRoZSBkcm9wZG93biB3aGVuIHVzZXIgY2xpY2tzIG91dHNpZGUgb2YgdGhlIGRyb3Bkb3duIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBpZihkcm9wZG93bkFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgJGNsaWNrYWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICAkY2xpY2thYmxlLmNsYXNzTmFtZSA9IFwiYmFja2Ryb3BcIjtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgJGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG4gICAgICAgICAgICAgICAgICAgICRib2R5LmFwcGVuZENoaWxkKCRjbGlja2FibGUpO1xuXG4gICAgICAgICAgICAgICAgICAgICRjbGlja2FibGUuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJGRyb3Bkb3duTGlzdC5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAkY2xpY2thYmxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBjaG9pY2UgZXZlbnRcbiAgICAgICAgICAgICRkcm9wZG93bkxpc3QucXVlcnlTZWxlY3RvckFsbCgnYScpLmZvckVhY2goZnVuY3Rpb24oYW5jaG9yKSB7XG4gICAgICAgICAgICAgICAgYW5jaG9yLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlbGVjdGlvbk9wdGlvbiA9IGFuY2hvci50ZXh0O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNsZWFudXAgcHJldmlvdXNseSBzZWxlY3RlZCBsaXN0IGl0ZW0gKHJlbW92ZSBhY3RpdmUgY2xhc3MpXG4gICAgICAgICAgICAgICAgICAgIGxldCAkY3VycmVudEFjdGl2ZUxpc3RJdGVtID0gJGRyb3Bkb3duTGlzdC5xdWVyeVNlbGVjdG9yKCdsaS5hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRBY3RpdmVMaXN0SXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBzZWxlY3QgY2xpY2tlZCBsaXN0IGl0ZW0gYnkgZ2l2aW5nIGl0IGBhY3RpdmVgIGNsYXNzIGFuZCBjaGFuZ2luZyBidXR0b24gbGFiZWwgdGV4dFxuICAgICAgICAgICAgICAgICAgICBhbmNob3IucGFyZW50RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IHNlbGVjdGlvbk9wdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICAvLyBjbG9zZSB0aGUgZHJvcGRvd24tbGlzdFxuICAgICAgICAgICAgICAgICAgICAkZHJvcGRvd25MaXN0LnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNsZWFudXAgOiByZW1vdmUgb3BlbmVkIGJhY2tkcm9wXG4gICAgICAgICAgICAgICAgICAgIGxldCAkYmFja2Ryb3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYmFja2Ryb3AnKTtcbiAgICAgICAgICAgICAgICAgICAgJGJhY2tkcm9wLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBQYWdpbmF0aW9uIHtcblxuICAgIC8vIGxhdW5jaCBjbGFzcyBtZXRob2RzXG4gICAgc3RhdGljIGluaXQoKSB7XG4gICAgICAgIHRoaXMucGFnaW5hdGlvbigpO1xuICAgIH1cblxuICAgIHN0YXRpYyBwYWdpbmF0aW9uKCkge1xuICAgICAgICBsZXQgcGFnaW5hdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYWdpbmF0aW9uJyk7XG4gICAgICAgIGxldCBwcmV2SXRlbSA9IHBhZ2luYXRpb24ucXVlcnlTZWxlY3RvcignLnByZXYnKTtcbiAgICAgICAgbGV0IG5leHRJdGVtID0gcGFnaW5hdGlvbi5xdWVyeVNlbGVjdG9yKCcubmV4dCcpO1xuICAgICAgICBsZXQgaXRlbXMgPSBwYWdpbmF0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJyk7XG4gICAgICAgIGxldCBpdGVtc1RvS2VlcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgbGV0IGFjdGl2ZUl0ZW1JbmRleDtcblxuICAgICAgICAvLyB0ZXN0cyB0byBnZXQgYWN0aXZlSXRlbUluZGV4IHJpZ2h0IGF3YXlcblxuXG5cbiAgICAgICAgLy8gc3RvcmUgaW4gYSBNYXAgdGhlIGl0ZW1zIHRvIGRpc3BsYXlcbiAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpKSB7XG4gICAgICAgICAgICAvLyBmaXJzdCBhbmQgbGFzdCB0d28gaXRlbXMgYXJlIGFsd2F5cyBkaXNwbGF5ZWRcbiAgICAgICAgICAgIGlmKDAgPT0gaSB8fCAxID09IGkgfHwgKGl0ZW1zLmxlbmd0aCAtIDIpID09IGkgfHwgKGl0ZW1zLmxlbmd0aCAtIDEpID09IGkpIHtcbiAgICAgICAgICAgICAgICBpdGVtc1RvS2VlcC5zZXQoaSwgaXRlbSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFjdGl2ZSBpdGVtcywgaXRzIHByZXZpb3VzIGFuZCBuZXh0IGl0ZW1zLCBhcmUgZGlzcGxheWVkIGFzIHdlbGxcbiAgICAgICAgICAgIGlmKGl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSkge1xuICAgICAgICAgICAgICAgIGl0ZW1zVG9LZWVwLnNldChpLTEsIGl0ZW1zW2ktMV0pO1xuICAgICAgICAgICAgICAgIGl0ZW1zVG9LZWVwLnNldChpLCBpdGVtKTtcbiAgICAgICAgICAgICAgICBpdGVtc1RvS2VlcC5zZXQoaSsxLCBpdGVtc1tpKzFdKTtcblxuICAgICAgICAgICAgICAgIGFjdGl2ZUl0ZW1JbmRleCA9IGk7IC8vIHN0b3JlIHRoZSBpbmZvcm1hdGlvbiBmb3IgbGF0ZXIgdXNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qIGFkZCBhcHByb3ByaWF0ZSBjbGFzc2VzIDogKi9cblxuICAgICAgICAvLyBkaXNhYmxlICdwcmV2JyBidXR0b24gaWYgYWN0aXZlIHBhZ2UgaXMgdGhlIGZpcnN0IG9uZVxuICAgICAgICBpZihhY3RpdmVJdGVtSW5kZXggPT0gMSkge1xuICAgICAgICAgICAgcHJldkl0ZW0uY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIGl0ZW1zWzNdLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTsgLy8gaWYgYWN0aXZlIHBhZ2UgaXMgMSwgdGhlIHRoaXJkIGl0ZW0gaXMgZGlzcGxheWVkXG4gICAgICAgIH1cblxuICAgICAgICAvLyBkaXNhYmxlICduZXh0JyBidXR0b24gaWYgYWN0aXZlIHBhZ2UgaXMgdGhlIGxhc3Qgb25lXG4gICAgICAgIGlmKGFjdGl2ZUl0ZW1JbmRleCA9PSAoaXRlbXMubGVuZ3RoIC0gMikpIHtcbiAgICAgICAgICAgIG5leHRJdGVtLmNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICBpdGVtc1soaXRlbXMubGVuZ3RoIC0gNCldLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZpcnN0IGVsbGlwc2lzIGNoZWNrXG4gICAgICAgIGlmKGFjdGl2ZUl0ZW1JbmRleCA+PSA0KSB7IGl0ZW1zWzJdLmNsYXNzTGlzdC5hZGQoJ2VsbGlwc2lzJywgJ3Nob3cnKTsgfVxuXG4gICAgICAgIC8vIGxhc3QgZWxsaXBzaXMgY2hlY2tcbiAgICAgICAgaWYoYWN0aXZlSXRlbUluZGV4IDw9IChpdGVtcy5sZW5ndGggLSA1KSkgeyBpdGVtc1soaXRlbXMubGVuZ3RoIC0gMyldLmNsYXNzTGlzdC5hZGQoJ2VsbGlwc2lzJywgJ3Nob3cnKTsgfVxuXG4gICAgICAgIC8vIGFjdGl2ZSBpdGVtLCBwcmV2aW91cyBhbmQgbmV4dCBvbmVzXG4gICAgICAgIGl0ZW1zWyhhY3RpdmVJdGVtSW5kZXggLSAxKV0uY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xuICAgICAgICBpdGVtc1thY3RpdmVJdGVtSW5kZXhdLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcbiAgICAgICAgaXRlbXNbKGFjdGl2ZUl0ZW1JbmRleCArIDEpXS5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XG5cbiAgICAgICAgLy8gcHJldiwgbmV4dCwgZmlyc3QgYW5kIGxhc3QgcGFnZXMgYXJlIGRpc3BsYXllZCBhcyB3ZWxsXG4gICAgICAgIHByZXZJdGVtLmNsYXNzTGlzdC5hZGQoJ3Nob3cnKTtcbiAgICAgICAgbmV4dEl0ZW0uY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xuICAgICAgICBpdGVtc1sxXS5jbGFzc0xpc3QuYWRkKCdzaG93Jyk7XG4gICAgICAgIGl0ZW1zWyhpdGVtcy5sZW5ndGggLSAyKV0uY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xuXG4gICAgICAgIC8vIGhpZGUgZXZlcnkgb3RoZXIgaXRlbXNcbiAgICAgICAgaXRlbXMuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICBpZighIGl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdzaG93JykpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyByZXBsYWNlICdlbGxpcHNpcycgY2xhc3MgbGlzdCBpdGVtIGNvbnRlbnQgd2l0aCAzIGRvdHNcbiAgICAgICAgbGV0IGVsbGlwc2lzSXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdsaS5lbGxpcHNpcycpO1xuICAgICAgICBlbGxpcHNpc0l0ZW1zLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgaXRlbS5xdWVyeVNlbGVjdG9yKCdhJykudGV4dENvbnRlbnQgPSBcIi4uLlwiO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgU3R5bGVndWlkZSB7XG4gICAgc3RhdGljIGluaXQoKSB7XG4gICAgICAgIGxldCB0ZXN0QnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zdGF0ZXMtaW5wdXQtYnV0dG9ucyBidXR0b24nKTtcbiAgICAgICAgdGVzdEJ1dHRvbnMuZm9yRWFjaChmdW5jdGlvbihidXR0b24pIHtcblxuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICAgIGxldCBmZWVkYmFja1RleHQgPSB0aGlzLmRhdGFzZXQudGV4dDtcbiAgICAgICAgICAgICAgICBsZXQgYWN0aW9uID0gdGhpcy5kYXRhc2V0LmFjdGlvbjtcbiAgICAgICAgICAgICAgICBsZXQgaW5wdXRHcm91cCA9IHRoaXMucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50O1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoKGFjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZGlzYWJsZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGUodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInJlc2V0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZGlzYWJsZSBidXR0b25cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkaXNhYmxlKGJ1dHRvbikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaW5wdXQgPSBpbnB1dEdyb3VwLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuZGlzYWJsZWQgPSAhaW5wdXQuZGlzYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmKGlucHV0LmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gXCJFbmFibGUgbWVcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBcIkRpc2FibGUgbWVcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHJlc2V0IHN0YXRlXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkaXNhYmxlQnV0dG9uID0gaW5wdXRHcm91cC5xdWVyeVNlbGVjdG9yKCcuYnRuLWdyZXknKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBjbGVhbnVwIHBvdGVudGlhbGx5IGRpc2FibGVkIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgIGlucHV0R3JvdXAucXVlcnlTZWxlY3RvcignaW5wdXQnKS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlQnV0dG9uLmlubmVySFRNTCA9IFwiRGlzYWJsZSBtZVwiO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBzdGF0ZXMgY2xhc3Nlc1xuICAgICAgICAgICAgICAgICAgICBpbnB1dEdyb3VwLmNsYXNzTmFtZSA9IFwiaW5wdXQtZ3JvdXBcIjtcblxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgZmVlZGJhY2sgc3RhdGUgaWYgZXhpc3RzXG4gICAgICAgICAgICAgICAgICAgIGlucHV0R3JvdXAucXVlcnlTZWxlY3RvcignLmZlZWRiYWNrJykgPyBpbnB1dEdyb3VwLnF1ZXJ5U2VsZWN0b3IoJy5mZWVkYmFjaycpLnJlbW92ZSgpIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBjaGFuZ2UgaW5wdXQgc3RhdGUgZmVlZGJhY2tcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdGF0ZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2xlYW4gdXAgaW4gY2FzZSB0aGUgaW5wdXQgaGFzIGJlZW4gZGlzYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRHcm91cC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLmRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkIG5ldyBjbGFzcyB0byBpbnB1dC1ncm91cFxuICAgICAgICAgICAgICAgICAgICBpbnB1dEdyb3VwLmNsYXNzTmFtZSA9IFwiaW5wdXQtZ3JvdXAgXCIgKyBhY3Rpb247XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVwbGFjZSB0aGUgZmVlZGJhY2sgc3BhbiBvciBjcmVhdGUgb25lXG4gICAgICAgICAgICAgICAgICAgIGxldCBmZWVkYmFja1NwYW4gPSBpbnB1dEdyb3VwLnF1ZXJ5U2VsZWN0b3IoJy5mZWVkYmFjaycpO1xuICAgICAgICAgICAgICAgICAgICBpZighIGZlZWRiYWNrU3Bhbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmVlZGJhY2tTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmVlZGJhY2tTcGFuLmNsYXNzTmFtZSA9IFwiZmVlZGJhY2tcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZlZWRiYWNrU3Bhbi50ZXh0Q29udGVudCA9IGZlZWRiYWNrVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRHcm91cC5pbnNlcnRCZWZvcmUoZmVlZGJhY2tTcGFuLCBpbnB1dEdyb3VwLnF1ZXJ5U2VsZWN0b3IoJy5zdGF0ZXMtaW5wdXQtYnV0dG9ucycpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufSIsImltcG9ydCB7IEZvcm0gfSBmcm9tICcuL0Zvcm0nO1xuaW1wb3J0IHsgUGFnaW5hdGlvbiB9IGZyb20gJy4vUGFnaW5hdGlvbic7XG5cbi8vIHN0eWxlZ3VpZGUgY3VzdG9tIGV4YW1wbGVzXG5pbXBvcnQgeyBTdHlsZWd1aWRlIH0gZnJvbSAnLi9TdHlsZWd1aWRlJztcblxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgRm9ybS5pbml0KCk7XG4gICAgUGFnaW5hdGlvbi5pbml0KCk7XG5cbiAgICAvLyBzdHlsZWd1aWRlIGN1c3RvbSBleGFtcGxlc1xuICAgIFN0eWxlZ3VpZGUuaW5pdCgpO1xufTsiXX0="}