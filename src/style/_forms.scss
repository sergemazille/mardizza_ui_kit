/////////////////////////////////////////////////////////////
// Mixins

@mixin input-group-feedback($color, $icon) {
    position: relative; // in order to position absolute icon
    $color-rgba: rgba(red($color), green($color), blue($color), .6); // box shadow custom color
    $color-dark: darken($color, 15%);

    // override input element default state
    .form-control {
        border-color: $color;
        padding-right: $input-feedback-padding; // avoid icon to step onto input text

        // add feedback icon
        background-image: url('../icons/#{$icon}.svg');
        background-repeat: no-repeat;
        background-position: 99.5% center;
        background-size: $input-feedback-padding;

        &:focus {
            border-color: $color-dark;
            box-shadow: inset 0 1px 1px rgba(0,0,0,.075),
                        0 0 $input-focus-spread $color-rgba;
        }
    }

    // feedback (text generated via javascript)
    .feedback {
        display: block;
        padding-left: $padding-base-horizontal;
        color: $color-dark;
        font-weight: $font-weight-semi-bold;
    }

    // add color to label for clarity
    label {
        color: $color-dark;
    }
}

@mixin reset-input() {
    position: absolute;
    left: 0;
    height: 1px;
    width: 1px;
    opacity: 0;
}

// checkbox and radio scaffolding
@mixin checkbox-radio($unchecked-icon, $checked-icon) {
    .label:hover { cursor: pointer; }

    .label:before {
        font-family: $font-family-icon;
        padding-right: .5em;
        vertical-align: -13%; // optically better than 'middle'
        font-size: 1.5em;
        color: $primary-faded;
        content: $unchecked-icon;
        transition: all .3s ease;
    }

    &:hover .label:before { content: $checked-icon; cursor: pointer;}

    [type="checkbox"], [type="radio"] {
        @include reset-input();

        &:checked {
            & ~ .label, & ~ .label:before { color: $secondary; }
            & ~ .label:before { content: $checked-icon; }
        }
    }

    &.disabled {
        pointer-events: none;

        .label {
            color: $primary-faded;
            &:before { color: $grey-faded; }
        }
    }
}

/////////////////////////////////////////////////////////////
// Classes

.form-control {
    display: block;
    width: 100%;
    padding: $btn-padding-vertical $padding-base-horizontal; // same height as buttons
    font-size: $input-font-size;
    line-height: $line-height-base;
    color: $font-color-base;
    background-color: $input-bg;
    background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
    border: 1px solid $input-border;
    border-radius: $radius; // Note: This has no effect on <select>s in some browsers, due to the limited stylability of <select>s in CSS.
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);

    &:focus {
        outline: 0;
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 3px $primary;
    }

    // Placeholder
    &::-moz-placeholder, &:-ms-input-placeholder, &::-webkit-input-placeholder {
        color: $input-color-placeholder;
    }

    // Unstyle the caret on `<select>`s in IE10+.
    &::-ms-expand {
        border: 0;
        background-color: transparent;
    }

    &[disabled], fieldset[disabled] &{
        background-color: $input-bg-disabled;
        border-color: $input-border-disabled;
        color: $input-color-disabled;
        opacity: 1; // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655
        cursor: not-allowed;

        // add disabled state icon
        background-image: url('../icons/not-allowed.svg');
        background-repeat: no-repeat;
        background-position: 99.5% center;
        background-size: $input-feedback-padding;
    }
}

.input-group {
    &.success-feedback { @include input-group-feedback($color: $success, $icon: "success"); }
    &.warning-feedback { @include input-group-feedback($color: $warning, $icon: "warning"); }
    &.error-feedback { @include input-group-feedback($color: $error, $icon: "alert"); }
}

// add some bottom space on form groups
.form-group {
    margin-bottom: $font-size-base;
}

// dropdown (select elements are way too complicated to be styled)
.dropdown {
    position: relative;

    .dropdown-trigger {
        position: relative;
        text-align: left;
        min-width: 300px;
        padding: $btn-padding-vertical $btn-padding-horizontal/2;

        &:after {
            font-family: 'icomoon';
            content: $icon-arrow-down;
            position: absolute;
            right: $padding-base-horizontal;
        }
    }

    .dropdown-list {
        margin-top: $padding-base-horizontal;
        padding: 0;
        min-width: 300px;
        background-color: $primary-faded;
        font-size: $font-size-base;
        border-radius: $radius;
        box-shadow: 0 6px 12px rgba(0,0,0,.175);
        position: absolute;
        top: 100%;
        left: 0;
        z-index: 1;
        display: none;
        float: left;
        text-align: left;
        list-style: none;
        background-clip: padding-box;

        li {
            a {
                color: $font-color-base;
                padding: 6px 20px;
                display: block;
                text-decoration: none;

                &:hover, &:focus {
                    color: $font-color-base;
                    background-color: $grey;
                }

                &:active {
                    color: #fff;
                    background-color: $secondary;
                }
            }

            // top list item rounded border
            &:first-of-type {
                a {
                    border-top-left-radius: $radius;
                    border-top-right-radius: $radius;
                }
            }

            // bottom list item rounded border
            &:last-of-type {
                a {
                    border-bottom-left-radius: $radius;
                    border-bottom-right-radius: $radius;
                }
            }

            &.active a {
                color: #fff;
                background-color: $secondary;
            }

            &.divider {
                height: 1px;
                border-top: 1px solid #fff;
                margin: 0 $padding-base-horizontal;
            }
        }
    }
}

// checkbox & radio
.checkbox { @include checkbox-radio($icon-checkbox, $icon-checkbox-checked); }
.radio { @include checkbox-radio($icon-radio, $icon-radio-checked); }

// toggle
.toggle {
    .label {
        font-weight: $font-weight-normal;
        cursor: pointer;
    }

    &.disabled {
        pointer-events: none;

        // button 'rail'
        .toggle-button { background-color: $grey-faded; }

        // round button
        .toggle-button:before { background-color: $primary-faded; }

        .label { color: $primary-faded; }
    }

    [type="checkbox"] {
        @include reset-input();

        &:checked ~ .toggle-button {
            background-color: $secondary;
            &:before, & + .label { color: $secondary; }

            // round button when checked
            &:before {
                background-color: $secondary-dark;
                left: 1em;
            }
        }
    }

    // button 'rail'
    .toggle-button {
        position: relative;
        vertical-align: middle; // optically better than 'middle'
        display: inline-block;
        height: 1em;
        width: 2em;
        margin: 12px;
        background-color: $primary-faded;
        border-radius: 100px;
        cursor: pointer;
        transition: all .3s ease .1s;

        // round button
        &:before {
            position: absolute;
            left: -10px;
            top: -.25em;
            width: 1.5em;
            height: 1.5em;
            border-radius: 100px;
            background-color: $primary-light;
            box-shadow: 1px 1px 2px rgba(0, 0, 0, .1);
            content: '';
            transition: all .3s ease;
        }
    }
}